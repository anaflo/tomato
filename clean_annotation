#!/usr/local/bin/python

# Python 2.7.6

# get_homsites.py

# Mathias Scharmann

# 27 March 2014



# example usage:

#	python get_homsites.py --rc perparents2_rc.txt --o testoutfile.txt



	

import os

import sys

import argparse

import numpy

 

class Printer():

	"""

	Print things to stdout on one line dynamically

	"""

	def __init__(self,data):

 

		sys.stdout.write("\r\x1b[K"+data.__str__())

		sys.stdout.flush()



# diese Funktion checkt ob ein file existiert und stoppt das script wenn ein file nicht exisitiert

def extant_file(x):

	"""

	'Type' for argparse - checks that file exists but does not open.

	"""

	

	if not os.path.exists(x):

		print "Error: {0} does not exist".format(x)

		exit()

	x = str(x)

	return x





# diese Funktion checkt ob nicht-UNIX linebreaks vorhanden sind und stoppt das script falls zutreffend

def linebreak_check(x):



	if "\r" in open(x, "rb").readline():

		print "Error: classic mac (CR) or DOS (CRLF) linebreaks in {0}".format(x)

		exit()

	

# diese Funktion gibt command line arguments mit flag an das script weiter und checkt ob die Angaben plausibel / vollstandig sind

def get_commandline_arguments ():

	

	parser = argparse.ArgumentParser()

		

	parser.add_argument("--perl_annot", required=True, type=extant_file,

		help="name / path of perl annotation file", metavar="FILE")



	

	args = parser.parse_args()

	

	linebreak_check(args.perl_annot)

	

	# finish

	return args

	

#############



def read_to_2dimlist (file):

	

	data = []

	count = 0

	with open(file, "r") as INFILE:

		for line in INFILE:

			data.append(line.strip("\n").split("\t"))

			count += 1

	print "infile sites:	", count

		

	return data



###########

			 	

def make_gene_dict_for_sites(inlist):

	

	outdict = {}

	non_annot_counter = 0

	for line in inlist:

		siteID = "\t".join([line[0], line[1]])

		

		linestring = "".join(line)

#		print linestring

		if "gene_name" in linestring:

			gene = linestring.split("gene_name")[1].lstrip(" \"").split("\"")[0]

		elif "oId" in linestring:

			gene = linestring.split("oId")[1].lstrip(" \"").split("\"")[0]

		else:

			non_annot_counter += 1

			gene = "na_site_{0}".format(non_annot_counter)	

#		print gene

		outdict[siteID] = gene

	

	return outdict





def write_annotation_to_file (outdict, outfilename):

	

	outheader = ["chrom", "site", "gene_name"]

	outlines = ["\t".join(outheader)]

	for siteID in sorted(outdict.keys()):

		chrom = siteID.split("\t")[0]

		site = siteID.split("\t")[1]

		gene_name = outdict[siteID]

		outlines.append("\t".join([chrom, site, gene_name]))

	

	with open (outfilename, "w") as OUTFILE:

		OUTFILE.write("\n".join(outlines))

	

########################



######### MAIN ########



def main(argv=None):

	if argv is None:

		argv = sys.argv[1:]

		

	args = 	get_commandline_arguments ()

	

	annot_data = read_to_2dimlist (args.perl_annot)

	

	clean_dict = make_gene_dict_for_sites (annot_data)

	

	# make sensible outfilename

	if "/" in args.perl_annot:

		a_file = args.endo_a.split("/")[-1]

	else:

		a_file = args.perl_annot

		

	write_annotation_to_file (clean_dict, "{0}.cleaned.txt".format(a_file))

	

	#print annot_data

	

	print "Done!"

	

	

if __name__ == "__main__": 

	main(sys.argv[1:])

